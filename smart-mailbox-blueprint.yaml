blueprint:
  name: 📬 Smart mailbox (Contact Sensor)
  description: >
    # 📬 Smart mailbox using a contact (opening) sensor
    
    This Blueprint detects mail deposits and collections in your mailbox using a **contact sensor**,
    confirmation entities, and optional counters or datetime entities.

  domain: automation
  author: "Eroak (modified by 0xAmit)"
  homeassistant:
    min_version: 2024.6.0

  input:
    detection:
      name: "Detection configuration*"
      icon: mdi:eye-check
      input:
        mailbox_sensor:
          name: "📬 Mailbox contact sensor"
          description: "The contact sensor on the mailbox (open/close)."
          selector:
            entity:
              filter:
                domain: binary_sensor
                device_class:
                  - opening

    collection:
      name: "Collection detection settings*"
      icon: mdi:call-split
      description: >
        Configure which entities and within what timeframe confirm that it is a collection 
        (rather than a deposit).
      input:
        timeout_in_seconds:
          name: "⏲️ Timeout delay"
          default: 45
          selector:
            number:
              min: 0
              max: 120
              step: 5
              unit_of_measurement: "seconds"
              mode: slider
        
        collection_confirming_entities:
          name: "⏻ Entities confirming collection"
          selector:
            entity:
              multiple: true
              filter:
                domain:
                  - binary_sensor
                  - switch
                device_class:
                  - door
                  - window
                  - opening

    notifications:
      name: "Notification settings"
      icon: mdi:bell-outline
      input:
        notify_service:
          name: "Notification service"
          default: "notify.notify"
          selector:
            text:

        notify_target:
          name: "Notification target (optional)"
          default: ""
          selector:
            text:

    actions:
      name: "Custom actions (optional)"
      icon: mdi:checkbox-marked-circle-auto-outline
      collapsed: true
      input:
        actions_in:
          name: "📬 Actions after mail deposit (optional)"
          default: []
          selector:
            action: {}
        
        actions_out:
          name: "📭 Actions after mail collection (optional)"
          default: []
          selector:
            action: {}

mode: single

trigger:
  - platform: state
    entity_id: !input mailbox_sensor
    from: "off"
    to: "on"

variables:
  scriptTriggeredAt: "{{ as_timestamp(now()) }}"
  timeoutInSeconds: !input timeout_in_seconds
  collectionConfirmingEntities: !input collection_confirming_entities
  notifyService: !input notify_service
  notifyTarget: !input notify_target
  actionsIn: !input actions_in
  actionsOut: !input actions_out

action:
  - alias: "Wait before determining if it's a deposit or collection"
    delay: "{{ timeoutInSeconds }}"

  - if:
      - alias: "Check if no collection entities triggered within timeout"
        condition: template
        value_template: >-
          {% set result = namespace(allDurationsExceedTimeout = true) %}
          {% for sensor in collectionConfirmingEntities %}
              {% if result.allDurationsExceedTimeout %}
                  {% set delta = (scriptTriggeredAt - as_timestamp(states[sensor].last_changed)) | round | abs %}
                  {% set result.allDurationsExceedTimeout = (delta > timeoutInSeconds) %}
              {% endif %}
          {% endfor %}
          {{ result.allDurationsExceedTimeout }}
    then:
      - alias: "Mail deposited"
        parallel:
          - alias: "Trigger notification for deposit"
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notifyService == 'notify.notify' and notifyTarget != '' }}"
                sequence:
                  - service: notify.notify
                    data:
                      message: "📮You've got mail! 📮"
                      title: "📬 Mailbox alert!"
                      target: "{{ notifyTarget }}"
              - conditions:
                  - condition: template
                    value_template: "{{ notifyService != 'notify.notify' }}"
                sequence:
                  - service: "{{ notifyService }}"
                    data:
                      message: "📮You've got mail! 📮"
                      title: "📬 Mailbox alert!"

          - alias: "Trigger actions for deposit"
            sequence: !input actions_in

    else:
      - alias: "Mail collected"
        parallel:
          - alias: "Trigger notification for collection"
            choose:
              - conditions:
                  - condition: template
                    value_template: "{{ notifyService == 'notify.notify' and notifyTarget != '' }}"
                sequence:
                  - service: notify.notify
                    data:
                      message: "Mail was picked up 📭"
                      title: "📬 Mailbox alert"
                      target: "{{ notifyTarget }}"
              - conditions:
                  - condition: template
                    value_template: "{{ notifyService != 'notify.notify' }}"
                sequence:
                  - service: "{{ notifyService }}"
                    data:
                      message: "Mail was picked up 📭"
                      title: "📬 Mailbox alert"

          - alias: "Trigger actions for collection"
            sequence: !input actions_out